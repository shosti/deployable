{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Deployable Elixir Stack",
  "Parameters": {
    "KeyName": {
      "Description": "Key Pair name",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "deployable"
    },
    "NumberOfServers": {
      "Description": "Number of servers",
      "Type": "Number",
      "Default": "2",
      "MinValue": "2",
      "MaxValue": "4"
    },
    "ApplicationName": {
      "Description": "Application name for deployment",
      "Type": "String",
      "Default": "DeployableApp"
    },
    "DeploymentGroupName": {
      "Description": "Deployment group name for deployment",
      "Type": "String",
      "Default": "DeployableDG"
    },
    "IpForSSH": {
      "Description": "Your public IP address to allow SSH access",
      "Type": "String"
    },
    "DeployBucket": {
      "Description": "S3 bucket for initial deployment code",
      "Type": "String",
      "Default": "deployable-code"
    },
    "DeployKey": {
      "Description": "S3 key for initial deployment code",
      "Type": "String",
      "Default": "0.0.9.tar.gz"
    },
    "PrivateAppSubnetACidrBlock": {
      "Description": "CIDR block for private app subnet A",
      "Type": "String",
      "Default": "10.0.1.0/24"
    },
    "PrivateAppSubnetBCidrBlock": {
      "Description": "CIDR block for private app subnet B",
      "Type": "String",
      "Default": "10.0.2.0/24"
    },
    "NATSubnetCidrBlock": {
      "Description": "CIDR block for NAT server subnet",
      "Type": "String",
      "Default": "10.0.0.0/24"
    },
    "LoadBalancerSubnetACidrBlock": {
      "Description": "CIDR block for load balancer subnet A",
      "Type": "String",
      "Default": "10.0.3.0/24"
    },
    "LoadBalancerSubnetBCidrBlock": {
      "Description": "CIDR block for load balancer subnet B",
      "Type": "String",
      "Default": "10.0.4.0/24"
    }
  },
  "Mappings": {
    "EC2RegionMap": {
      "us-east-1": {"UbuntuXenial": "ami-45b69e52", "AmazonLinuxNAT": "ami-863b6391"}
    }
  },
  "Resources": {
    "SecurityGroupApp": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Permissive security group for instances in private subnets",
        "VpcId": {"Ref": "VPC"}
      }
    },
    "SecurityGroupAppIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties":{
        "IpProtocol": "-1",
        "FromPort": "-1",
        "ToPort": "-1",
        "CidrIp": "0.0.0.0/0",
        "GroupId": {"Ref": "SecurityGroupApp"}
      }
    },
    "SecurityGroupAppEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties":{
        "IpProtocol": "-1",
        "FromPort": "-1",
        "ToPort": "-1",
        "CidrIp": "0.0.0.0/0",
        "GroupId": {"Ref": "SecurityGroupApp"}
      }
    },
    "SecurityGroupNAT": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security group for NAT server",
        "VpcId": {"Ref": "VPC"}
      }
    },
    "SecurityGroupNATIngressHTTP": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "IpProtocol": "6",
        "FromPort": "80",
        "ToPort": "80",
        "SourceSecurityGroupId": {"Ref": "SecurityGroupApp"},
        "GroupId": {"Ref": "SecurityGroupNAT"}
      }
    },
    "SecurityGroupNATIngressHTTPS": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "IpProtocol": "6",
        "FromPort": "443",
        "ToPort": "443",
        "SourceSecurityGroupId": {"Ref": "SecurityGroupApp"},
        "GroupId": {"Ref": "SecurityGroupNAT"}
      }
    },
    "SecurityGroupNATIngressSSH": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "IpProtocol": "6",
        "FromPort": "22",
        "ToPort": "22",
        "CidrIp": {"Fn::Join": ["", [{"Ref": "IpForSSH"}, "/32"]]},
        "GroupId": {"Ref": "SecurityGroupNAT"}
      }
    },
    "SecurityGroupNATEgressHTTP": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties":{
        "IpProtocol": "6",
        "FromPort": "80",
        "ToPort": "80",
        "CidrIp": "0.0.0.0/0",
        "GroupId": {"Ref": "SecurityGroupNAT"}
      }
    },
    "SecurityGroupNATEgressHTTPS": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties":{
        "IpProtocol": "6",
        "FromPort": "443",
        "ToPort": "443",
        "CidrIp": "0.0.0.0/0",
        "GroupId": {"Ref": "SecurityGroupNAT"}
      }
    },
    "SecurityGroupNATEgressSSH": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties":{
        "IpProtocol": "6",
        "FromPort": "22",
        "ToPort": "22",
        "DestinationSecurityGroupId": {"Ref": "SecurityGroupApp"},
        "GroupId": {"Ref": "SecurityGroupNAT"}
      }
    },
    "SecurityGroupLoadBalancer": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "Security group for public load balancer",
        "VpcId": {"Ref": "VPC"}
      }
    },
    "SecurityGroupLoadBalancerIngressHTTP": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties": {
        "IpProtocol": "6",
        "FromPort": "80",
        "ToPort": "80",
        "CidrIp": "0.0.0.0/0",
        "GroupId": {"Ref": "SecurityGroupLoadBalancer"}
      }
    },
    "SecurityGroupLoadBalancerEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties":{
        "IpProtocol": "6",
        "FromPort": "4000",
        "ToPort": "4000",
        "GroupId": {"Ref": "SecurityGroupLoadBalancer"},
        "DestinationSecurityGroupId": {"Ref": "SecurityGroupApp"}
      }
    },
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": "true"
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
      }
    },
    "VPCGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "InternetGatewayId": {"Ref": "InternetGateway"}
      }
    },
    "SubnetPublicNAT": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {"Fn::Select": ["0", {"Fn::GetAZs": ""}]},
        "CidrBlock": {"Ref": "NATSubnetCidrBlock"},
        "VpcId": {"Ref": "VPC"}
      }
    },
    "RouteTablePublicNAT": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "VPC"}
      }
    },
    "RouteTableAssociationPublicNAT": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {"Ref": "SubnetPublicNAT"},
        "RouteTableId": {"Ref": "RouteTablePublicNAT"}
      }
    },
    "RoutePublicNATToInternet": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {"Ref": "RouteTablePublicNAT"},
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {"Ref": "InternetGateway"}
      },
      "DependsOn": "VPCGatewayAttachment"
    },
    "SubnetPublicLoadBalancerA": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {"Fn::Select": ["0", {"Fn::GetAZs": ""}]},
        "CidrBlock": {"Ref": "LoadBalancerSubnetACidrBlock"},
        "VpcId": {"Ref": "VPC"}
      }
    },
    "SubnetPublicLoadBalancerB": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {"Fn::Select": ["1", {"Fn::GetAZs": ""}]},
        "CidrBlock": {"Ref": "LoadBalancerSubnetBCidrBlock"},
        "VpcId": {"Ref": "VPC"}
      }
    },
    "RouteTablePublicLoadBalancerA": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "VPC"}
      }
    },
    "RouteTablePublicLoadBalancerB": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "VPC"}
      }
    },
    "RouteTableAssociationPublicLoadBalancerA": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {"Ref": "SubnetPublicLoadBalancerA"},
        "RouteTableId": {"Ref": "RouteTablePublicLoadBalancerA"}
      }
    },
    "RouteTableAssociationPublicLoadBalancerB": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {"Ref": "SubnetPublicLoadBalancerB"},
        "RouteTableId": {"Ref": "RouteTablePublicLoadBalancerB"}
      }
    },
    "RoutePublicLoadBalancerToInternetA": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {"Ref": "RouteTablePublicLoadBalancerA"},
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {"Ref": "InternetGateway"}
      },
      "DependsOn": "VPCGatewayAttachment"
    },
    "RoutePublicLoadBalancerToInternetB": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {"Ref": "RouteTablePublicLoadBalancerB"},
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {"Ref": "InternetGateway"}
      },
      "DependsOn": "VPCGatewayAttachment"
    },
    "SubnetPrivateAppA": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {"Fn::Select": ["0", {"Fn::GetAZs": ""}]},
        "CidrBlock": {"Ref": "PrivateAppSubnetACidrBlock"},
        "VpcId": {"Ref": "VPC"}
      }
    },
    "SubnetPrivateAppB": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {"Fn::Select": ["1", {"Fn::GetAZs": ""}]},
        "CidrBlock": {"Ref": "PrivateAppSubnetBCidrBlock"},
        "VpcId": {"Ref": "VPC"}
      }
    },
    "RouteTablePrivateAppA": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "VPC"}
      }
    },
    "RouteTablePrivateAppB": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "VPC"}
      }
    },
    "RouteTableAssociationPrivateAppA": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {"Ref": "SubnetPrivateAppA"},
        "RouteTableId": {"Ref": "RouteTablePrivateAppA"}
      }
    },
    "RouteTableAssociationPrivateAppB": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {"Ref": "SubnetPrivateAppB"},
        "RouteTableId": {"Ref": "RouteTablePrivateAppB"}
      }
    },
    "RoutePrivateAppToInternetA": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {"Ref": "RouteTablePrivateAppA"},
        "DestinationCidrBlock": "0.0.0.0/0",
        "InstanceId": {"Ref": "NatServer"}
      }
    },
    "RoutePrivateAppToInternetB": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {"Ref": "RouteTablePrivateAppB"},
        "DestinationCidrBlock": "0.0.0.0/0",
        "InstanceId": {"Ref": "NatServer"}
      }
    },
    "NetworkAclPrivateApp": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {"Ref": "VPC"}
      }
    },
    "SubnetNetworkAclAssociationPrivateAppA": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {"Ref": "SubnetPrivateAppA"},
        "NetworkAclId": {"Ref": "NetworkAclPrivateApp"}
      }
    },
    "SubnetNetworkAclAssociationPrivateAppB": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {"Ref": "SubnetPrivateAppB"},
        "NetworkAclId": {"Ref": "NetworkAclPrivateApp"}
      }
    },
    "NetworkAclEntryInPrivateAppSSH": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "NetworkAclPrivateApp"},
        "RuleNumber": "100",
        "Protocol": "6",
        "PortRange": {
          "From": "22",
          "To": "22"
        },
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": {"Ref": "NATSubnetCidrBlock"}
      }
    },
    "NetworkAclEntryInPrivateAppHTTP": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "NetworkAclPrivateApp"},
        "RuleNumber": "110",
        "Protocol": "6",
        "PortRange": {
          "From": "4000",
          "To": "4000"
        },
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": {"Ref": "LoadBalancerSubnetACidrBlock"}
      }
    },
    "NetworkAclEntryInPrivateAppInternalA": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "NetworkAclPrivateApp"},
        "RuleNumber": "120",
        "Protocol": "6",
        "PortRange": {
          "From": "0",
          "To": "65535"
        },
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": {"Ref": "PrivateAppSubnetACidrBlock"}
      }
    },
    "NetworkAclEntryInPrivateAppInternalB": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "NetworkAclPrivateApp"},
        "RuleNumber": "125",
        "Protocol": "6",
        "PortRange": {
          "From": "0",
          "To": "65535"
        },
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": {"Ref": "PrivateAppSubnetBCidrBlock"}
      }
    },
    "NetworkAclEntryInNATPrivateAppHTTP": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "NetworkAclPrivateApp"},
        "RuleNumber": "130",
        "Protocol": "6",
        "PortRange": {
          "From": "80",
          "To": "80"
        },
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": {"Ref": "NATSubnetCidrBlock"}
      }
    },
    "NetworkAclEntryInPrivateAppEphemeralPorts": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "NetworkAclPrivateApp"},
        "RuleNumber": "200",
        "Protocol": "6",
        "PortRange": {
          "From": "32768",
          "To": "61000"
        },
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0"
      }
    },
    "NetworkAclEntryOutPrivateAppHTTP": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "NetworkAclPrivateApp"},
        "RuleNumber": "100",
        "Protocol": "6",
        "PortRange": {
          "From": "80",
          "To": "80"
        },
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0"
      }
    },
    "NetworkAclEntryOutPrivateAppHTTPS": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "NetworkAclPrivateApp"},
        "RuleNumber": "110",
        "Protocol": "6",
        "PortRange": {
          "From": "443",
          "To": "443"
        },
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0"
      }
    },
    "NetworkAclEntryOutPrivateAppEphemeralPorts": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "NetworkAclPrivateApp"},
        "RuleNumber": "200",
        "Protocol": "6",
        "PortRange": {
          "From": "1024",
          "To": "65535"
        },
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "10.0.0.0/16"
      }
    },
    "NatServer": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": {"Fn::FindInMap": ["EC2RegionMap", {"Ref": "AWS::Region"}, "AmazonLinuxNAT"]},
        "InstanceType": "t2.micro",
        "KeyName": {"Ref": "KeyName"},
        "NetworkInterfaces": [{
          "AssociatePublicIpAddress": "true",
          "DeleteOnTermination": "true",
          "SubnetId": {"Ref": "SubnetPublicNAT"},
          "DeviceIndex": "0",
          "GroupSet": [{"Ref": "SecurityGroupNAT"}]
        }],
        "SourceDestCheck": "false",
        "UserData": {"Fn::Base64": {"Fn::Join": ["", [
          "#!/bin/bash -ex\n",
          "yum update -y\n",
          "/opt/aws/bin/cfn-signal --stack ", {"Ref": "AWS::StackName"}, " --resource NatServer --region ", {"Ref": "AWS::Region"}, "\n"
        ]]}}
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT5M"
        }
      },
      "DependsOn": "VPCGatewayAttachment"
    },
    "LoadBalancer": {
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
      "Properties": {
        "Name": "LoadBalancer",
        "Scheme": "internet-facing",
        "SecurityGroups": [{"Ref": "SecurityGroupLoadBalancer"}],
        "Subnets": [{"Ref": "SubnetPublicLoadBalancerA"}, {"Ref": "SubnetPublicLoadBalancerB"}]
      },
      "DependsOn": "VPCGatewayAttachment"
    },
    "LoadBalancerAppTargetGroup": {
      "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
      "Properties": {
        "HealthCheckIntervalSeconds": "10",
        "HealthCheckPath": "/status",
        "HealthCheckPort": "4000",
        "HealthCheckProtocol": "HTTP",
        "HealthyThresholdCount": "3",
        "Name": "DeployableAppTargetGroup",
        "Port": "4000",
        "Protocol": "HTTP",
        "VpcId": {"Ref": "VPC"}
      }
    },
    "LoadBalancerListener": {
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
      "Properties": {
        "DefaultActions": [{
          "TargetGroupArn": {"Ref": "LoadBalancerAppTargetGroup"},
          "Type": "forward"
        }],
        "LoadBalancerArn": {"Ref": "LoadBalancer"},
        "Port": "80",
        "Protocol": "HTTP"
      }
    },
    "AppServerLaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Metadata": {
        "AWS::CloudFormation::Init": {
          "config": {
            "services": {
              "sysvinit": {
                "codedeploy-agent": {
                  "enabled": "true",
                  "ensureRunning": "true"
                }
              }
            },
            "users": {
              "deploy": {
                "homeDir": "/deploy"
              }
            }
          }
        }
      },
      "Properties": {
        "ImageId": {"Fn::FindInMap": ["EC2RegionMap", {"Ref": "AWS::Region"}, "UbuntuXenial"]},
        "InstanceType": "t2.micro",
        "SecurityGroups": [{"Ref": "SecurityGroupApp"}],
        "KeyName": {"Ref": "KeyName"},
        "IamInstanceProfile": {"Ref": "InstanceRoleInstanceProfile"},
        "UserData": {"Fn::Base64": {"Fn::Join": ["", [
          "#!/bin/bash -ex\n",
          "apt-get update -y\n",
          "apt-get upgrade -y\n",
          "apt-get install wget ruby awscli python-pip -y\n",
          "# Install CloudFormation helpers\n",
          "cd /home/ubuntu\n",
          "mkdir aws-cfn-bootstrap-latest\n",
          "curl https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz | tar xz -C aws-cfn-bootstrap-latest --strip-components 1\n",
          "easy_install aws-cfn-bootstrap-latest\n",
          "# Install the AWS CodeDeploy Agent.\n",
          "wget https://aws-codedeploy-", {"Ref": "AWS::Region"}, ".s3.amazonaws.com/latest/install\n",
          "chmod +x ./install\n",
          "./install auto\n",
          "# Make deploy dir.\n",
          "mkdir /deploy\n",
          "cfn-init -s ", {"Ref": "AWS::StackId"}, " -r AppServerLaunchConfiguration --region ", {"Ref": "AWS::Region"}, "\n",
          "chown deploy:deploy /deploy\n",
          "# Unfortunately CodeDeploy has trouble with nologin so we have to do some hacking...\n",
          "chsh -s /bin/bash deploy\n",
          "# All is well, so signal success.\n",
          "cfn-signal --stack ", {"Ref": "AWS::StackName"}, " --resource AppServerAutoScalingGroup --region ", {"Ref": "AWS::Region"}, "\n"
        ]]}}
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT10M"
        }
      }
    },
    "AppServerAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "LaunchConfigurationName": {"Ref": "AppServerLaunchConfiguration"},
        "MinSize": {"Ref": "NumberOfServers"},
        "MaxSize": {"Ref": "NumberOfServers"},
        "DesiredCapacity": {"Ref": "NumberOfServers"},
        "VPCZoneIdentifier": [{"Ref": "SubnetPrivateAppA"}, {"Ref": "SubnetPrivateAppB"}],
        "TargetGroupARNs": [{"Ref": "LoadBalancerAppTargetGroup"}],
        "Tags": [{
          "Key": "AutoScalingGroupName",
          "Value": "Deployable",
          "PropagateAtLaunch": "true"
        }]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT10M"
        }
      },
      "DependsOn": "NatServer"
    },
    "InstanceRoleInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      }
    },
    "InstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "ec2.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Path": "/"
      }
    },
    "InstanceRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "InstanceRole",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Action": [
                "autoscaling:Describe*",
                "cloudformation:Describe*",
                "cloudformation:GetTemplate",
                "ec2:DescribeInstances",
                "s3:Get*"
              ],
              "Resource": "*"
            }
          ]
        },
        "Roles": [
          {
            "Ref": "InstanceRole"
          }
        ]
      }
    },
    "CodeDeployTrustRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Sid": "1",
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "codedeploy.us-east-1.amazonaws.com",
                  "codedeploy.us-west-2.amazonaws.com"
                ]
              },
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Path": "/"
      }
    },
    "CodeDeployRolePolicies": {
      "Type": "AWS::IAM::Policy",
      "Properties": {
        "PolicyName": "CodeDeployPolicy",
        "PolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Resource": [
                "*"
              ],
              "Action": [
                "ec2:Describe*"
              ]
            },
            {
              "Effect": "Allow",
              "Resource": [
                "*"
              ],
              "Action": [
                "autoscaling:CompleteLifecycleAction",
                "autoscaling:DeleteLifecycleHook",
                "autoscaling:DescribeLifecycleHooks",
                "autoscaling:DescribeAutoScalingGroups",
                "autoscaling:PutLifecycleHook",
                "autoscaling:RecordLifecycleActionHeartbeat"
              ]
            }
          ]
        },
        "Roles": [
          {
            "Ref": "CodeDeployTrustRole"
          }
        ]
      }
    },
    "DeployableApp": {
      "Type": "AWS::CodeDeploy::Application",
      "Properties": {
        "ApplicationName": {"Ref": "ApplicationName"}
      }
    },
    "DeployableDeploymentGroup": {
      "Type": "AWS::CodeDeploy::DeploymentGroup",
      "Properties": {
        "ApplicationName": {"Ref": "DeployableApp"},
        "AutoScalingGroups": [{"Ref": "AppServerAutoScalingGroup"}],
        "DeploymentGroupName": {"Ref": "DeploymentGroupName"},
        "DeploymentConfigName": "CodeDeployDefault.OneAtATime",
        "Deployment": {
          "Description": "Initial deploy",
          "Revision": {
            "RevisionType": "S3",
            "S3Location": {
              "Bucket": {"Ref": "DeployBucket"},
              "Key": {"Ref": "DeployKey"},
              "BundleType": "tgz"
            }
          }
        },
        "ServiceRoleArn": {
          "Fn::GetAtt": [
            "CodeDeployTrustRole",
            "Arn"
          ]
        }
      }
    }
  },
  "Outputs": {
    "BastionHostPublicName": {
      "Value": {"Fn::GetAtt": ["NatServer", "PublicDnsName"]},
      "Description": "connect via SSH as user ec2-user"
    },
    "URL": {
      "Value": {"Fn::Join": ["", ["http://", {"Fn::GetAtt": ["LoadBalancer", "DNSName"]}]]},
      "Description": "Load Balancer URL"
    }
  }
}
