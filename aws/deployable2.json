{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "AWS in Action: chapter 6 (VPC)",
  "Parameters": {
    "KeyName": {
      "Description": "Key Pair name",
      "Type": "AWS::EC2::KeyPair::KeyName",
      "Default": "mykey"
    },
    "NumberOfServers": {
      "Description": "Number of servers",
      "Type": "Number",
      "Default": "2",
      "MinValue": "2",
      "MaxValue": "4"
    }
  },
  "Mappings": {
    "EC2RegionMap": {
      "us-east-1": {"AmazonLinuxAMIHVMEBSBacked64bit": "ami-b73b63a0", "AmazonLinuxNATAMIHVMEBSBacked64bit": "ami-863b6391"}
    }
  },
  "Resources": {
    "SecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription": "My security group",
        "VpcId": {"Ref": "VPC"}
      }
    },
    "SecurityGroupIngress": {
      "Type": "AWS::EC2::SecurityGroupIngress",
      "Properties":{
        "IpProtocol": "-1",
        "FromPort": "-1",
        "ToPort": "-1",
        "CidrIp": "0.0.0.0/0",
        "GroupId": {"Ref": "SecurityGroup"}
      }
    },
    "SecurityGroupEgress": {
      "Type": "AWS::EC2::SecurityGroupEgress",
      "Properties":{
        "IpProtocol": "-1",
        "FromPort": "-1",
        "ToPort": "-1",
        "CidrIp": "0.0.0.0/0",
        "GroupId": {"Ref": "SecurityGroup"}
      }
    },
    "VPC": {
      "Type": "AWS::EC2::VPC",
      "Properties": {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": "true"
      }
    },
    "InternetGateway": {
      "Type": "AWS::EC2::InternetGateway",
      "Properties": {
      }
    },
    "VPCGatewayAttachment": {
      "Type": "AWS::EC2::VPCGatewayAttachment",
      "Properties": {
        "VpcId": {"Ref": "VPC"},
        "InternetGatewayId": {"Ref": "InternetGateway"}
      }
    },
    "SubnetPublicNAT": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {"Fn::Select": ["0", {"Fn::GetAZs": ""}]},
        "CidrBlock": "10.0.0.0/24",
        "VpcId": {"Ref": "VPC"}
      }
    },
    "RouteTablePublicNAT": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "VPC"}
      }
    },
    "RouteTableAssociationPublicNAT": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {"Ref": "SubnetPublicNAT"},
        "RouteTableId": {"Ref": "RouteTablePublicNAT"}
      }
    },
    "RoutePublicNATToInternet": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {"Ref": "RouteTablePublicNAT"},
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {"Ref": "InternetGateway"}
      },
      "DependsOn": "VPCGatewayAttachment"
    },
    "NetworkAclPublicNAT": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {"Ref": "VPC"}
      }
    },
    "SubnetNetworkAclAssociationPublicNAT": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {"Ref": "SubnetPublicNAT"},
        "NetworkAclId": {"Ref": "NetworkAclPublicNAT"}
      }
    },
    "NetworkAclEntryInPublicNATHTTP": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "NetworkAclPublicNAT"},
        "RuleNumber": "100",
        "Protocol": "6",
        "PortRange": {
          "From": "80",
          "To": "80"
        },
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "10.0.0.0/16"
      }
    },
    "NetworkAclEntryInPublicNATHTTPS": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "NetworkAclPublicNAT"},
        "RuleNumber": "110",
        "Protocol": "6",
        "PortRange": {
          "From": "443",
          "To": "443"
        },
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "10.0.0.0/16"
      }
    },
    "NetworkAclEntryInPublicNATEphemeralPorts": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "NetworkAclPublicNAT"},
        "RuleNumber": "200",
        "Protocol": "6",
        "PortRange": {
          "From": "1024",
          "To": "65535"
        },
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0"
      }
    },
    "NetworkAclEntryOutPublicNATHTTP": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "NetworkAclPublicNAT"},
        "RuleNumber": "100",
        "Protocol": "6",
        "PortRange": {
          "From": "80",
          "To": "80"
        },
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0"
      }
    },
    "NetworkAclEntryOutPublicNATHTTPS": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "NetworkAclPublicNAT"},
        "RuleNumber": "110",
        "Protocol": "6",
        "PortRange": {
          "From": "443",
          "To": "443"
        },
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0"
      }
    },
    "NetworkAclEntryOutPublicNATEphemeralPorts": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "NetworkAclPublicNAT"},
        "RuleNumber": "200",
        "Protocol": "6",
        "PortRange": {
          "From": "1024",
          "To": "65535"
        },
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0"
      }
    },
    "SubnetPublicSSHBastion": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {"Fn::Select": ["0", {"Fn::GetAZs": ""}]},
        "CidrBlock": "10.0.1.0/24",
        "VpcId": {"Ref": "VPC"}
      }
    },
    "RouteTablePublicSSHBastion": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "VPC"}
      }
    },
    "RouteTableAssociationPublicSSHBastion": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {"Ref": "SubnetPublicSSHBastion"},
        "RouteTableId": {"Ref": "RouteTablePublicSSHBastion"}
      }
    },
    "RoutePublicSSHBastionToInternet": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {"Ref": "RouteTablePublicSSHBastion"},
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {"Ref": "InternetGateway"}
      },
      "DependsOn": "VPCGatewayAttachment"
    },
    "NetworkAclPublicSSHBastion": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {"Ref": "VPC"}
      }
    },
    "SubnetNetworkAclAssociationPublicSSHBastion": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {"Ref": "SubnetPublicSSHBastion"},
        "NetworkAclId": {"Ref": "NetworkAclPublicSSHBastion"}
      }
    },
    "NetworkAclEntryInPublicSSHBastionSSH": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "NetworkAclPublicSSHBastion"},
        "RuleNumber": "100",
        "Protocol": "6",
        "PortRange": {
          "From": "22",
          "To": "22"
        },
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0"
      }
    },
    "NetworkAclEntryInPublicSSHBastionEphemeralPorts": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "NetworkAclPublicSSHBastion"},
        "RuleNumber": "200",
        "Protocol": "6",
        "PortRange": {
          "From": "1024",
          "To": "65535"
        },
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "10.0.0.0/16"
      }
    },
    "NetworkAclEntryOutPublicSSHBastionSSH": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "NetworkAclPublicSSHBastion"},
        "RuleNumber": "100",
        "Protocol": "6",
        "PortRange": {
          "From": "22",
          "To": "22"
        },
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "10.0.0.0/16"
      }
    },
    "NetworkAclEntryOutPublicSSHBastionEphemeralPorts": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "NetworkAclPublicSSHBastion"},
        "RuleNumber": "200",
        "Protocol": "6",
        "PortRange": {
          "From": "1024",
          "To": "65535"
        },
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0"
      }
    },
    "SubnetPublicLoadBalancer": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {"Fn::Select": ["0", {"Fn::GetAZs": ""}]},
        "CidrBlock": "10.0.2.0/24",
        "VpcId": {"Ref": "VPC"}
      }
    },
    "RouteTablePublicLoadBalancer": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "VPC"}
      }
    },
    "RouteTableAssociationPublicLoadBalancer": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {"Ref": "SubnetPublicLoadBalancer"},
        "RouteTableId": {"Ref": "RouteTablePublicLoadBalancer"}
      }
    },
    "RoutePublicLoadBalancerToInternet": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {"Ref": "RouteTablePublicLoadBalancer"},
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": {"Ref": "InternetGateway"}
      },
      "DependsOn": "VPCGatewayAttachment"
    },
    "NetworkAclPublicLoadBalancer": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {"Ref": "VPC"}
      }
    },
    "SubnetNetworkAclAssociationPublicLoadBalancer": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {"Ref": "SubnetPublicLoadBalancer"},
        "NetworkAclId": {"Ref": "NetworkAclPublicLoadBalancer"}
      }
    },
    "NetworkAclEntryInPublicLoadBalancerHTTP": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "NetworkAclPublicLoadBalancer"},
        "RuleNumber": "110",
        "Protocol": "6",
        "PortRange": {
          "From": "80",
          "To": "80"
        },
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0"
      }
    },
    "NetworkAclEntryInPublicLoadBalancerEphemeralPorts": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "NetworkAclPublicLoadBalancer"},
        "RuleNumber": "200",
        "Protocol": "6",
        "PortRange": {
          "From": "1024",
          "To": "65535"
        },
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0"
      }
    },
    "NetworkAclEntryOutPublicLoadBalancerHTTP": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "NetworkAclPublicLoadBalancer"},
        "RuleNumber": "100",
        "Protocol": "6",
        "PortRange": {
          "From": "80",
          "To": "80"
        },
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0"
      }
    },
    "NetworkAclEntryOutPublicLoadBalancerHTTPS": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "NetworkAclPublicLoadBalancer"},
        "RuleNumber": "110",
        "Protocol": "6",
        "PortRange": {
          "From": "443",
          "To": "443"
        },
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0"
      }
    },
    "NetworkAclEntryOutPublicLoadBalancerEphemeralPorts": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "NetworkAclPublicLoadBalancer"},
        "RuleNumber": "200",
        "Protocol": "6",
        "PortRange": {
          "From": "1024",
          "To": "65535"
        },
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0"
      }
    },
    "SubnetPrivateApache": {
      "Type": "AWS::EC2::Subnet",
      "Properties": {
        "AvailabilityZone": {"Fn::Select": ["0", {"Fn::GetAZs": ""}]},
        "CidrBlock": "10.0.3.0/24",
        "VpcId": {"Ref": "VPC"}
      }
    },
    "RouteTablePrivateApache": {
      "Type": "AWS::EC2::RouteTable",
      "Properties": {
        "VpcId": {"Ref": "VPC"}
      }
    },
    "RouteTableAssociationPrivateApache": {
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
      "Properties": {
        "SubnetId": {"Ref": "SubnetPrivateApache"},
        "RouteTableId": {"Ref": "RouteTablePrivateApache"}
      }
    },
    "RoutePrivateApacheToInternet": {
      "Type": "AWS::EC2::Route",
      "Properties": {
        "RouteTableId": {"Ref": "RouteTablePrivateApache"},
        "DestinationCidrBlock": "0.0.0.0/0",
        "InstanceId": {"Ref": "NatServer"}
      }
    },
    "NetworkAclPrivateApache": {
      "Type": "AWS::EC2::NetworkAcl",
      "Properties": {
        "VpcId": {"Ref": "VPC"}
      }
    },
    "SubnetNetworkAclAssociationPrivateApache": {
      "Type": "AWS::EC2::SubnetNetworkAclAssociation",
      "Properties": {
        "SubnetId": {"Ref": "SubnetPrivateApache"},
        "NetworkAclId": {"Ref": "NetworkAclPrivateApache"}
      }
    },
    "NetworkAclEntryInPrivateApacheSSH": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "NetworkAclPrivateApache"},
        "RuleNumber": "100",
        "Protocol": "6",
        "PortRange": {
          "From": "22",
          "To": "22"
        },
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "10.0.1.0/24"
      }
    },
    "NetworkAclEntryInPrivateApacheHTTP": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "NetworkAclPrivateApache"},
        "RuleNumber": "110",
        "Protocol": "6",
        "PortRange": {
          "From": "80",
          "To": "80"
        },
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "10.0.2.0/24"
      }
    },
    "NetworkAclEntryInPrivateApacheEphemeralPorts": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "NetworkAclPrivateApache"},
        "RuleNumber": "200",
        "Protocol": "6",
        "PortRange": {
          "From": "1024",
          "To": "65535"
        },
        "RuleAction": "allow",
        "Egress": "false",
        "CidrBlock": "0.0.0.0/0"
      }
    },
    "NetworkAclEntryOutPrivateApacheHTTP": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "NetworkAclPrivateApache"},
        "RuleNumber": "100",
        "Protocol": "6",
        "PortRange": {
          "From": "80",
          "To": "80"
        },
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0"
      }
    },
    "NetworkAclEntryOutPrivateApacheHTTPS": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "NetworkAclPrivateApache"},
        "RuleNumber": "110",
        "Protocol": "6",
        "PortRange": {
          "From": "443",
          "To": "443"
        },
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "0.0.0.0/0"
      }
    },
    "NetworkAclEntryOutPrivateApacheEphemeralPorts": {
      "Type": "AWS::EC2::NetworkAclEntry",
      "Properties": {
        "NetworkAclId": {"Ref": "NetworkAclPrivateApache"},
        "RuleNumber": "200",
        "Protocol": "6",
        "PortRange": {
          "From": "1024",
          "To": "65535"
        },
        "RuleAction": "allow",
        "Egress": "true",
        "CidrBlock": "10.0.0.0/16"
      }
    },
    "NatServer": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": {"Fn::FindInMap": ["EC2RegionMap", {"Ref": "AWS::Region"}, "AmazonLinuxNATAMIHVMEBSBacked64bit"]},
        "InstanceType": "t2.micro",
        "KeyName": {"Ref": "KeyName"},
        "NetworkInterfaces": [{
          "AssociatePublicIpAddress": "true",
          "DeleteOnTermination": "true",
          "SubnetId": {"Ref": "SubnetPublicNAT"},
          "DeviceIndex": "0",
          "GroupSet": [{"Ref": "SecurityGroup"}]
        }],
        "SourceDestCheck": "false",
        "UserData": {"Fn::Base64": {"Fn::Join": ["", [
          "#!/bin/bash -ex\n",
          "/opt/aws/bin/cfn-signal --stack ", {"Ref": "AWS::StackName"}, " --resource NatServer --region ", {"Ref": "AWS::Region"}, "\n"
        ]]}}
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT5M"
        }
      },
      "DependsOn": "VPCGatewayAttachment"
    },
    "BastionHost": {
      "Type": "AWS::EC2::Instance",
      "Properties": {
        "ImageId": {"Fn::FindInMap": ["EC2RegionMap", {"Ref": "AWS::Region"}, "AmazonLinuxAMIHVMEBSBacked64bit"]},
        "InstanceType": "t2.micro",
        "KeyName": {"Ref": "KeyName"},
        "NetworkInterfaces": [{
          "AssociatePublicIpAddress": "true",
          "DeleteOnTermination": "true",
          "SubnetId": {"Ref": "SubnetPublicSSHBastion"},
          "DeviceIndex": "0",
          "GroupSet": [{"Ref": "SecurityGroup"}]
        }]
      },
      "DependsOn": "VPCGatewayAttachment"
    },
    "LoadBalancer": {
      "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
      "Properties": {
        "Subnets": [{"Ref": "SubnetPublicLoadBalancer"}],
        "LoadBalancerName": "elb",
        "Listeners": [{
          "InstancePort": "80",
          "InstanceProtocol": "HTTP",
          "LoadBalancerPort": "80",
          "Protocol": "HTTP"
        }],
        "HealthCheck": {
          "HealthyThreshold": "3",
          "Interval": "10",
          "Target": "HTTP:80/index.html",
          "Timeout": "5",
          "UnhealthyThreshold": "2"
        },
        "SecurityGroups": [{"Ref": "SecurityGroup"}],
        "Scheme": "internet-facing"
      },
      "DependsOn": "VPCGatewayAttachment"
    },
    "ApacheServerLaunchConfiguration": {
      "Type": "AWS::AutoScaling::LaunchConfiguration",
      "Properties": {
        "ImageId": {"Fn::FindInMap": ["EC2RegionMap", {"Ref": "AWS::Region"}, "AmazonLinuxAMIHVMEBSBacked64bit"]},
        "InstanceType": "t2.micro",
        "SecurityGroups": [{"Ref": "SecurityGroup"}],
        "KeyName": {"Ref": "KeyName"},
        "UserData": {"Fn::Base64": {"Fn::Join": ["", [
          "#!/bin/bash -ex\n",
          "yum -y install httpd\n",
          "echo 'BAAAAAR' > /var/www/html/index.html\n",
          "service httpd start\n",
          "/opt/aws/bin/cfn-signal --stack ", {"Ref": "AWS::StackName"}, " --resource ApacheServerAutoScalingGroup --region ", {"Ref": "AWS::Region"}, "\n"
        ]]}}
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT10M"
        }
      }
    },
    "ApacheServerAutoScalingGroup": {
      "Type": "AWS::AutoScaling::AutoScalingGroup",
      "Properties": {
        "LoadBalancerNames": [{"Ref": "LoadBalancer"}],
        "LaunchConfigurationName": {"Ref": "ApacheServerLaunchConfiguration"},
        "MinSize": {"Ref": "NumberOfServers"},
        "MaxSize": {"Ref": "NumberOfServers"},
        "DesiredCapacity": {"Ref": "NumberOfServers"},
        "VPCZoneIdentifier": [{"Ref": "SubnetPrivateApache"}]
      },
      "CreationPolicy": {
        "ResourceSignal": {
          "Timeout": "PT10M"
        }
      },
      "DependsOn": "NatServer"
    }
  },
  "Outputs": {
    "BastionHostPublicName": {
      "Value": {"Fn::GetAtt": ["BastionHost", "PublicDnsName"]},
      "Description": "connect via SSH as user ec2-user"
    },
    "URL": {
      "Value": {"Fn::Join": ["", ["http://", {"Fn::GetAtt": ["LoadBalancer", "DNSName"]}]]},
      "Description": "Load Balancer URL"
    }
  }
}
