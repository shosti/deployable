#!/usr/bin/env bash

set -eo pipefail

ROOT="$( cd "$( dirname "${BASH_SOURCE[0]}" )/.." && pwd )"
# shellcheck source=scripts/vars
. "$ROOT/scripts/vars"
MY_IP=$(curl -s http://ipinfo.io/ip)

mix # to get rid of junk
VERSION=$(mix run -e 'IO.puts Mix.Project.config[:version]')

get_stack_status() {
    aws cloudformation describe-stacks --stack-name "$STACK_NAME" \
        --query Stacks[0].StackStatus \
        --region "$REGION"
}

if aws cloudformation describe-stacks --stack-name "$STACK_NAME" > /dev/null 2>&1; then
    CMD=update-stack
else
    CMD=create-stack
fi

if aws s3 ls "s3://${DEPLOY_BUCKET}/${VERSION}.tar.gz" > /dev/null; then
    # shellcheck source=scripts/vars
    SKIP_DEPLOYMENT=true . "$ROOT/scripts/release"
fi

aws cloudformation "$CMD" \
    --stack-name "$STACK_NAME" \
    --template-body "file://$ROOT/aws/deployable.json" \
    --capabilities CAPABILITY_IAM \
    --parameters \
    "ParameterKey=IpForSSH,ParameterValue=${MY_IP}" \
    "ParameterKey=KeyName,ParameterValue=${KEY_PAIR_NAME}" \
    "ParameterKey=DeployBucket,ParameterValue=${DEPLOY_BUCKET}" \
    "ParameterKey=DeployKey,ParameterValue=${VERSION}.tar.gz" \
    --region "$REGION"

while [[ $(get_stack_status) != *"COMPLETE"* ]]; do
    echo "Stack status: $(get_stack_status)"
    sleep 10
done
aws cloudformation describe-stacks --stack-name "$STACK_NAME" --query "Stacks[0].Outputs" --region "$REGION"
